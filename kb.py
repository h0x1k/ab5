from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

def admin_panel_keyboard(is_parsing_active):
    buttons = [
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_menu")],
        [InlineKeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏", callback_data="subscriptions_menu")],
        [InlineKeyboardButton(text="üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ë–ö", callback_data="bookmakers_menu")],
        [InlineKeyboardButton(text="üì¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏", callback_data="channel_settings_menu")],
        [InlineKeyboardButton(text="üìà –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞", callback_data="bot_status")],
        [InlineKeyboardButton(text="üîç –û—Ç–ª–∞–¥–∫–∞", callback_data="debug_info")],
        [InlineKeyboardButton(text=f"{'‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥' if is_parsing_active else '‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥'}", callback_data="toggle_parsing")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def settings_menu_keyboard():
    buttons = [
        [InlineKeyboardButton(text="üîë –õ–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å Sportschecker", callback_data="set_credentials")],
        [InlineKeyboardButton(text="‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–∞—Ä—Å–∏–Ω–≥–∞", callback_data="set_parsing_interval")],
        [InlineKeyboardButton(text="üïí –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞", callback_data="set_working_time")],
        [InlineKeyboardButton(text="üåê –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å", callback_data="set_timezone")],
        [InlineKeyboardButton(text="üìä –õ–∏–º–∏—Ç—ã —Å–∏–≥–Ω–∞–ª–æ–≤", callback_data="set_signal_limits")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin_panel")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def subscriptions_menu_keyboard():
    buttons = [
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="add_subscription")],
        [InlineKeyboardButton(text="‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="pause_subscription")],
        [InlineKeyboardButton(text="‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="unpause_subscription")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="cancel_subscription")],
        [InlineKeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="user_list_from_subs")],
        [InlineKeyboardButton(text="üëë –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="set_admin_user_list")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin_panel")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def user_actions_keyboard(user_id):
    buttons = [
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=f"add_subscription:{user_id}")],
        [InlineKeyboardButton(text="‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=f"pause_subscription:{user_id}")],
        [InlineKeyboardButton(text="‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=f"unpause_subscription:{user_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=f"cancel_subscription:{user_id}")],
        [InlineKeyboardButton(text="üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ë–ö", callback_data=f"select_user_for_bk:{user_id}")],
        [InlineKeyboardButton(text="üëë –°–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º", callback_data=f"set_admin_user_list:{user_id}")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="user_list_from_subs")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def bookmakers_menu_keyboard():
    buttons = [
        [InlineKeyboardButton(text="üë§ –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="user_bk_management")],
        [InlineKeyboardButton(text="‚öôÔ∏è –î–ª—è —Å–∏—Å—Ç–µ–º—ã", callback_data="admin_bk_management")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin_panel")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def users_list_keyboard(users, action_prefix):
    buttons = []
    for user in users:
        username = user['username'] or f"User {user['user_id']}"
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º action_prefix –≤–º–µ—Å—Ç–æ –∂–µ—Å—Ç–∫–æ–≥–æ "user_list_from_subs"
        buttons.append([InlineKeyboardButton(text=username, callback_data=f"{action_prefix}:{user['user_id']}")])
    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin_panel")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def user_bookmakers_keyboard(user_id, bookmakers, selected_ids):
    buttons = []
    
    # Add toggle all button
    buttons.append([InlineKeyboardButton(
        text="‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ –ë–ö" if not selected_ids or len(selected_ids) == len([b for b in bookmakers if b['is_active']]) else "‚òëÔ∏è –í—ã–±—Ä–∞—Ç—å –≤—Å–µ –ë–ö",
        callback_data=f"toggle_all_bk:{user_id}"
    )])
    
    # Add bookmaker buttons
    for bookmaker in bookmakers:
        if not bookmaker['is_active']:
            continue
            
        is_selected = bookmaker['id'] in selected_ids
        emoji = "‚úÖ" if is_selected else "‚ùå"
        buttons.append([InlineKeyboardButton(
            text=f"{emoji} {bookmaker['name']}",
            callback_data=f"toggle_bk:{bookmaker['id']}"
        )])
    
    # Add save and back buttons
    buttons.append([InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data=f"save_bk:{user_id}")])
    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="user_bk_management")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def admin_bookmakers_management_keyboard(bookmakers):
    buttons = []
    for bookmaker in bookmakers:
        status = "‚úÖ" if bookmaker['is_active'] else "‚ùå"
        buttons.append([InlineKeyboardButton(
            text=f"{status} {bookmaker['name']}",
            callback_data=f"admin_toggle_bk:{bookmaker['id']}"
        )])
    buttons.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ë–ö", callback_data="add_new_bk")])
    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="bookmakers_menu")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def back_to_admin_panel_keyboard():
    buttons = [[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin_panel")]]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def channel_management_keyboard():
    buttons = [
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤", callback_data="channel_list")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="add_channel")],
        [InlineKeyboardButton(text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ë–ö –∫–∞–Ω–∞–ª–æ–≤", callback_data="manage_channel_bk")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin_panel")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def channels_list_keyboard(channels, action_prefix):
    buttons = []
    for channel in channels:
        status = "‚úÖ" if channel['is_active'] else "‚ùå"
        buttons.append([InlineKeyboardButton(
            text=f"{status} {channel['name']}",
            callback_data=f"{action_prefix}:{channel['channel_id']}"
        )])
    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="channel_settings_menu")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def channel_bookmakers_management_keyboard(bookmakers, selected_ids):
    """Create keyboard for channel bookmaker management"""
    keyboard = []
    
    # Handle case where bookmakers might be IDs instead of objects
    if bookmakers and isinstance(bookmakers[0], int):
        # Convert IDs to bookmaker objects
        all_bookmakers = database.get_all_bookmakers()
        bookmaker_objects = []
        for bk_id in bookmakers:
            bk_obj = next((b for b in all_bookmakers if b['id'] == bk_id), None)
            if bk_obj:
                bookmaker_objects.append(bk_obj)
        bookmakers = bookmaker_objects
    
    # Process bookmaker objects
    for bookmaker in bookmakers:
        if isinstance(bookmaker, dict) and 'id' in bookmaker:
            is_selected = bookmaker['id'] in selected_ids
            emoji = "‚úÖ" if is_selected else "‚ùå"
            keyboard.append([
                InlineKeyboardButton(
                    text=f"{emoji} {bookmaker.get('name', 'Unknown')}",
                    callback_data=f"channel_toggle_bk:{bookmaker['id']}"
                )
            ])
    
    # Add select all/none button
    if bookmakers:
        all_selected = all(bk['id'] in selected_ids for bk in bookmakers if isinstance(bk, dict) and 'id' in bk)
        toggle_all_text = "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ" if all_selected else "‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ"
        keyboard.append([
            InlineKeyboardButton(
                text=toggle_all_text,
                callback_data=f"channel_toggle_all_bk"
            )
        ])
    
    # Add save button
    keyboard.append([
        InlineKeyboardButton(
            text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
            callback_data=f"channel_save_bk"
        )
    ])
    
    # Add back button
    keyboard.append([
        InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data="back_to_admin_panel"
        )
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)